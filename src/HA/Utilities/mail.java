package HA.Utilities;

import java.util.Properties;
import javax.mail.*;
import javax.mail.internet.*;

import HA.Properties.HATF_properties;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;

public class mail {
	
	public static HATF_properties _properties = new HATF_properties();
	public static int totalTCcount = 0;
	public static int passTCcount = 0;
	public static int failTCcount = 0;
	public static String testPassPercentage = null;
	public static String testPassRate = null;
	
	
	public static void sendmail() throws Exception{

		mailGeneration.sendMail("exectionReport");
	}
	
	public static void exemail() throws Exception{
		mailGeneration.sendMail("start");
	}
	
	
	public static String exemailtext(){
		
		String mailtext = "";		
		mailtext=mailtext+"Hi Team,\n";			
		mailtext=mailtext+"We have started executing automation test cases through Selenium. We'll be receiving another results e-mail when execution is complete.\n";			
		mailtext=mailtext+"Note: This is automatically generated by automation tool.\n";			
		mailtext=mailtext+"Regards\n";
		mailtext=mailtext+"QA Automation Team";		
		return mailtext;		
	}
	public static void consolidatedmailresult() throws Exception{
		
		
		HTML.consolidatemailHTMLprep();		
		String userName="QAautomationrun@hostanalytics.com";
		String passWord= "automation@123";
		String host="smtp.gmail.com";
		String port="465";
		String starttls="true";
		String auth="true";
		boolean debug=true;
		String socketFactoryClass="javax.net.ssl.SSLSocketFactory";
		String fallback="false";
		//String to="mchiruvella@hostanalytics.com";
		String to=_properties.getProperty(HATF_properties.Exemail);
		String cc ="mchiruvella@hostanalytics.com";
		String subject="Core HACPM Smoke Test on May Release "+generateHTMLReport.consol_testPassPercentage;
		String attachmentPath= HTML.consolidatedmailreportpath;
		
		{
			//Object Instantiation of a properties file.
			Properties props = new Properties();
			props.put("mail.smtp.user", userName);
			props.put("mail.smtp.host", host);

			if(!"".equals(port)){
				props.put("mail.smtp.port", port);
			}

			if(!"".equals(starttls)){
				props.put("mail.smtp.starttls.enable",starttls);
				props.put("mail.smtp.auth", auth);
			}

			if(debug){
				props.put("mail.smtp.debug", "true");
			}
			else{
				props.put("mail.smtp.debug", "false");
			}

			if(!"".equals(port)){
				props.put("mail.smtp.socketFactory.port", port);
			}

			if(!"".equals(socketFactoryClass)){
				props.put("mail.smtp.socketFactory.class",socketFactoryClass);
			}

			if(!"".equals(fallback)){
				props.put("mail.smtp.socketFactory.fallback", fallback);
			}

			try{

				Session session = Session.getDefaultInstance(props, null);

				//session.setDebug(debug);

				MimeMessage msg = new MimeMessage(session);
				msg.setSubject(subject);

				Multipart multipart = new MimeMultipart();
				MimeBodyPart messageBodyPart = new MimeBodyPart();
				DataSource source = new FileDataSource(attachmentPath);
				messageBodyPart.setDataHandler(new DataHandler(source));
				//messageBodyPart.setFileName(attachmentName);
				multipart.addBodyPart(messageBodyPart);

				msg.setContent(multipart);
				msg.setFrom(new InternetAddress(userName));

				msg.addRecipients(Message.RecipientType.TO, to);
				msg.addRecipients(Message.RecipientType.CC, cc);
//				msg.addRecipients(Message.RecipientType.TO, bcc);
				msg.saveChanges();

				Transport transport = session.getTransport("smtp");
				transport.connect(host, userName, passWord);
				transport.sendMessage(msg, msg.getAllRecipients());

				transport.close();
//				mail.logger.info("Mail Sent");
				System.out.println("Mail Sent");
			} 

			catch (Exception e){
				e.printStackTrace();
//				mail.logger.error(e);				
			}
		}
	}
	public static void main(String args[]) throws Exception
	{
		consolidatedmailresult();
	}

}
